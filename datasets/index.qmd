---
title: ""
page-layout: full
format: 
  html: 
    toc: false
---

## ðŸ‡¸ðŸ‡¬ Lion City Soundscapes

```{r init, echo=FALSE, message=FALSE, warning=FALSE}
if(!requireNamespace("pacman", quietly=TRUE)) install.packages("pacman")
pacman::p_load(tidyverse, gstat, sp, sf, raster, leaflet, leaflet.extras, osmdata)
```

```{r leafletmap, echo=FALSE, message=FALSE, warning=FALSE}

load(file = "../data/lcs_meta_predictions.RData")

#create list of icons to represent the PAQ quadrants
iconSet <- iconList(
        "F&E" = makeIcon(
          "../data/icons/pin_vibrant.png", 
          iconWidth = 32, iconHeight = 32
          ),
        "C&T" = makeIcon(
          "../data/icons/pin_calm.png",
          iconWidth = 32, iconHeight = 32
          ),
        "B&L" = makeIcon(
          "../data/icons/pin_boring.png", 
          iconWidth = 32, iconHeight = 32
          ),
        "C&R" = makeIcon(
          "../data/icons/pin_chaotic.png", 
          iconWidth = 32, iconHeight = 32
          )
)

#generate leaflet map
lcsmap <- leaflet(df) |> 
        addProviderTiles(providers$CartoDB.Positron) |>
        addMarkers(
                data = df, 
                layerId = paste0("marker", df$lcs_id), 
                group = "Markers",
                icon = iconSet[df$s5_type],
                clusterOptions = markerClusterOptions(),
                popup = ~paste0(
                        "<h3 style='color: black'>",
                        " <a href=\'",link_full_youtube,"\'>",
                        lcs_description,"</a>",
                        "</h3> ",
                        "<b>Type:</b> ", s5_type, "<br> ",
                        "<b>SPL:</b> ", 
                        formatC(
                                insitu_spl_1min_LR_eavg,
                                digits=2,
                                format = "f"
                                ),
                        " dB(A) <br> ",
                        "<b>ISOPL:</b> ",
                        formatC(
                                isopl_1min,
                                digits=2,
                                format = "f"
                                ),
                        "<br> ",
                        "<b>ISOEV:</b> ",
                        formatC(
                                isoev_1min,
                                digits=2,
                                format = "f"
                                ), "<br> ",
                        youtube_iframe
                        ), 
                popupOptions = c(maxWidth = 560)
            ) |>
        addLegend(
                colors = c("#CE2E6C","#FFB5B5","#F0DECB","#504658"),
                labels = c(
                        "Full of Life & Exciting",
                        "Calm & Tranquil",
                        "Lifeless & Boring",
                        "Chaotic & Restless"
                        ),
                group = "Markers",
                title = "Site Category",
                position = "bottomright"
        )
```

```{r, echo=FALSE, message=FALSE, warning=FALSE, results = FALSE}
#compute the isopl and isoev layers

coordinates(df) <- ~longitude + latitude
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")

# Create a grid for prediction with an extended bounding box to be bigger than 
# singapore's openstreetmap bounding box
margin <- 0.02  # margin to extend the bounding box (degrees)
bbox <- getbb("Singapore")
bbox[1, 1] <- bbox[1, 1] - margin*2
bbox[1, 2] <- bbox[1, 2] + margin*5
bbox[2, 1] <- bbox[2, 1] - margin*2
bbox[2, 2] <- bbox[2, 2] + margin*2

# Use spsample to create a larger grid
grd <- as.data.frame(
  spsample(as(extent(bbox), "SpatialPolygons"), 
           "regular", n = 100000)
  )
coordinates(grd) <- ~x1 + x2
gridded(grd) <- TRUE
proj4string(grd) <- CRS("+proj=longlat +datum=WGS84")

# Perform IDW interpolation
idw_isopl <- idw(
  formula = isopl_1min ~ 1, 
  locations = df, 
  newdata = grd,
  debug.level = 0
  )
idw_isoev <- idw(
  formula = isoev_1min ~ 1, 
  locations = df, 
  newdata = grd,
  debug.level = 0
  )

# Convert IDW output to raster using only the predicted values
r_isopl <- rasterFromXYZ(
        as.data.frame(idw_isopl)[, c("x1", "x2", "var1.pred")], 
        crs = CRS("+proj=longlat +datum=WGS84")
        )
r_isoev <- rasterFromXYZ(
        as.data.frame(idw_isoev)[, c("x1", "x2", "var1.pred")], 
        crs = CRS("+proj=longlat +datum=WGS84")
        )

# Get Singapore boundaries from OpenStreetMap using osmdata
singapore_query <- opq(bbox = c(103.6, 1.2, 104.0, 1.5)) |>
  add_osm_feature(key = 'boundary', value = 'administrative') |>
  add_osm_feature(key = 'admin_level', value = '2') |>
  add_osm_feature(key = 'name', value = 'Singapore')
singapore_data <- osmdata_sf(singapore_query)

# Ensure Singapore boundaries are correctly obtained
if (length(singapore_data$osm_multipolygons) > 0) {
  # Filter out polygons beyond a certain longitude
  singapore <- singapore_data$osm_multipolygons
  # Transform Singapore boundaries to the same CRS as the raster
  singapore <- st_transform(singapore, crs(r_isopl))
} else {
  stop("Failed to obtain Singapore boundaries from OpenStreetMap.")
}

#mask cannot handle multipolygons, dissolve first
singapore_dissolved <- st_union(singapore)
r_isopl_cropped <- mask(r_isopl, as(singapore_dissolved, "Spatial"))
r_isoev_cropped <- mask(r_isoev, as(singapore_dissolved, "Spatial"))

# Define color palette
pal_isopl <- colorNumeric(
        "RdYlBu", 
        values(r_isopl), 
        na.color = "transparent"
        )
pal_isoev <- colorNumeric(
        "PRGn",
        values(r_isoev), 
        na.color = "transparent"
        )

# Convert raster to SpatialPolygonsDataFrame for leaflet
r_isopl_spdf <- rasterToPolygons(r_isopl_cropped, dissolve = TRUE)
r_isoev_spdf <- rasterToPolygons(r_isoev_cropped, dissolve = TRUE)

lcsmap <- lcsmap |> 
        #addProviderTiles(providers$CartoDB.DarkMatter) |>
        addPolygons(
                group = "ISO Pleasantness",
                data = r_isopl_spdf, 
                fillColor = ~pal_isopl(var1.pred), 
                fillOpacity = 0.5, 
                weight = 0
                ) |>
        addLegend(
                pal = pal_isopl,
                values = values(r_isopl),
                title = "ISOPL",
                position = "bottomleft"
                ) |>
        addPolygons(
                group = "ISO Eventfulness",
                data = r_isoev_spdf, 
                fillColor = ~pal_isoev(var1.pred), 
                fillOpacity = 0.5, 
                weight = 0
                ) |>
        addLegend(
                pal = pal_isoev,
                values = values(r_isoev),
                title = "ISOEV",
                position = "bottomleft"
                ) |>
        addLayersControl(overlayGroups = c(
                "Markers",
                "ISO Pleasantness",
                "ISO Eventfulness"
                ))
```

```{r, echo=FALSE, message=FALSE, warning=FALSE}
lcsmap |>
  setView(103.8, 1.34, zoom = 11)
```

-   {{< fa video >}} The "[Lion CIty Soundscapes](https://doi.org/10.21979/N9/AVHSBX)" dataset consists of 62 360Â° audiovisual recordings ({{< fa brands youtube >}}) to characterise the soundscape in Singapore. The locations represent perceptual dimensions of "[Full of Life & Exciting]{style="color: #CE2E6C"}", "[Calm & Tranquil]{style="color: #FFB5B5"}", "[Lifeless & Boring]{style="color: #F0DECB"}", and "[Chaotic & Restless]{style="color: #504658"}".

-   The ISO Pleasantness and ISO Eventfulness map layers computed from binaural recordings at each site represent the perceived affective quality of each site according to ISO 12913-3.

-   For more information: follow the hyperlinks to the associated publications detailing the [site selection method](https://doi.org/10.3390/su14127485) and the [recording and excerpting methodology](https://doi.org/10.1121/10.0025830). This is an enhancement of the [original visualisation](https://github.com/ntudsp/lion-city-soundscapes-visualisation).
